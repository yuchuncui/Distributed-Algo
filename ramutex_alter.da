import sys
import random
import time

class RAMutex(DistProcess):
	def setup(s, n, id):
		defer = []
		executing = False
		requested = False
		reqc = 0
		counter = 0


	def cs(task):
		--request
		output("P%s requesting CS" % id)
		reqc = logical_clock()
		send(Request(reqc),s)
		requested = True
		
		await(all(any((c3,p3) > (reqc,self) for c3 in received(Reply(c3, p3))) for p3 in s))

		# critical section
		executing = True
		task()
		--release
		executing = False
		output("P%s exiting CS" % id)
		requested = False
		
		send(Reply(logical_clock(), self), defer)
		defer = []
		
	def main():
		def anounce():
			output("P%s entering CS" % id)
		for i in range(n):
			cs(anounce)
		send(Exit(self), s) 

	def OnRequest(req):
		if (not requested) and (not executing) or (requested and(req, _source) < (reqc, self)):
			send(Reply(logical_clock(), self), _source)
		else:
			defer.append(_source)
	def OnExit():
		s = s - {_source}

